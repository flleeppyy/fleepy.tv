<% layout("../../layouts/default.ejs", { title: "Fleepy.tv | Tools", }) %>

<div class="body">
  <%~ includeFile("../../partials/nameheader.ejs"); %> <%~ includeFile("../../partials/navbar.ejs"); %>

  <div class="box">
    <h1>WinSCP Password Decrypter</h1>
    <p>"Decrypts" passwords from WinSCP backups</p>
    <p><a href="https://github.com/anoopengineer/winscppasswd" target="_blank">Converted to JS from this project</a></p>
    <hr>

    <h2>Decrypt Single Entry</h2>
    <input type="text" id="host" placeholder="Host">
    <input type="text" id="username" placeholder="Username">
    <input type="text" id="password" placeholder="Encrypted Password">
    <button onclick="decryptSingle()">Decrypt</button>
    <div class="output" id="singleOutput"></div>

    <h2>Decrypt INI File</h2>
    <input type="file" id="iniFile" accept=".ini">
    <button onclick="decryptIni()">Parse and Decrypt</button>
    <div class="output" id="iniOutput"></div>
  
  </div>

  <script>
    const PW_MAGIC = 0xa3;
    const PW_FLAG = 0xff;

    function decrypt(host, username, password) {
      const key = username + host;
      let passbytes = [];
      for (let i = 0; i < password.length; i++) {
        const val = parseInt(password[i], 16);
        if (!isNaN(val)) passbytes.push(val);
      }

      let [flag, rest] = decNextChar(passbytes);
      let length = 0;

      if (flag === PW_FLAG) {
        [, rest] = decNextChar(rest);
        [length, rest] = decNextChar(rest);
      } else {
        length = flag;
      }

      let [toBeDeleted, remaining] = decNextChar(rest);
      remaining = remaining.slice(toBeDeleted * 2);

      let clearpass = "";
      for (let i = 0; i < length; i++) {
        let val;
        [val, remaining] = decNextChar(remaining);
        clearpass += String.fromCharCode(val);
      }

      if (flag === PW_FLAG) {
        clearpass = clearpass.substring(key.length);
      }
      return clearpass;
    }

    function decNextChar(bytes) {
      if (bytes.length < 2) return [0, bytes];
      const a = bytes[0],
        b = bytes[1];
      const next = ~(((a << 4) + b) ^ PW_MAGIC) & 0xff;
      return [next, bytes.slice(2)];
    }

    function decryptSingle() {
      const host = document.getElementById("host").value;
      const user = document.getElementById("username").value;
      const pass = document.getElementById("password").value;
      const result = decrypt(host, user, pass);
      document.getElementById("singleOutput").innerText = `Decrypted password: ${result}`;
    }

    function decryptIni() {
      const fileInput = document.getElementById("iniFile");
      if (fileInput.files.length === 0) {
        alert("Please select an INI file.");
        return;
      }

      const reader = new FileReader();
      reader.onload = function (e) {
        const text = e.target.result;
        const result = parseIniAndDecrypt(text);
        document.getElementById("iniOutput").innerText = result;
      };
      reader.readAsText(fileInput.files[0]);
    }

    function parseIniAndDecrypt(iniText) {
      const lines = iniText.split(/\r?\n/);
      const sections = {};
      let currentSection = null;

      for (const line of lines) {
        if (line.startsWith("[")) {
          currentSection = line.slice(1, -1);
          sections[currentSection.toLowerCase()] = {};
        } else if (currentSection && line.includes("=")) {
          const [k, v] = line.split("=");
          sections[currentSection.toLowerCase()][k.trim().toLowerCase()] = v.trim();
        }
      }

      let output = "";
      for (const section in sections) {
        const data = sections[section];
        if ("password" in data) {
          const host = data["hostname"] || "";
          const user = data["username"] || "";
          const encrypted = data["password"] || "";
          const plain = decrypt(host, user, encrypted);
          output += `Session: ${section.replace(/^sessions\\/, "")}\n`;
          output += `  Hostname: ${host}\n`;
          output += `  Username: ${user}\n`;
          output += `  Password: ${plain}\n`;
          output += `========================\n`;
        }
      }

      return output || "No passwords found.";
    }
  </script>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    textarea {
      width: 100%;
      height: 200px;
    }
    input,
    button {
      margin: 5px 0;
      padding: 5px;
    }
    .output {
      white-space: pre;
      background: #333;
      padding: 10px;
      margin-top: 10px;
    }
  </style>
</div>
